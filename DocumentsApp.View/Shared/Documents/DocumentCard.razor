@using DocumentsApp.Shared.Dtos.DocumentDtos
@using DocumentsApp.Shared.Enums

@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

@if (Document is not null)
{
    <RadzenCard class="w-100 doc-card" ContextMenu="@ShowContextMenuWithItems">
        <div>
            <RadzenText
                TextStyle="TextStyle.H5"
                Text="@Document.Name" />
            <hr>
            <div class="d-flex mb-2">
                <RadzenIcon Icon="person"/>
                <RadzenText TextStyle="TextStyle.Subtitle2" Text="@Document.AccountName" class="m-0"></RadzenText>
            </div>
            <div class="d-flex flex-column">
                <RadzenText
                    TextStyle="TextStyle.Caption"
                    class="m-0"
                    Text="@(Document.DateCreated.ToShortDateString())"/>
                <RadzenText
                    TextStyle="TextStyle.Caption"
                    class="m-0"
                    Text="@(Document.DateCreated.ToLongTimeString())">
                </RadzenText>
            </div>
        </div>
        <div class="d-flex justify-content-end flex-wrap">
            <div class="d-flex">
                <RadzenIcon Icon="visibility" class="icon" @onclick="@OnViewClick"/>
                <RadzenIcon Icon="edit" class="icon" @onclick="@OnEditClick"/>
            </div>
            <div class="d-flex">
                <RadzenIcon Icon="share" class="icon" @onclick="@OnShareClick"/>
                <RadzenIcon Icon="delete" class="icon" @onclick="@OnDeleteClick"/>
            </div>
        </div>
    </RadzenCard>
}

@code {

    [Parameter]
    public GetDocumentDto? Document { get; set; }
    
    [Parameter]
    public EventCallback Deleted { get; set; }

    private List<ContextMenuItem> _contextMenuItems = new()
    {
        new ContextMenuItem() { Text = "View Document", Value = DocumentContextMenuAction.View },
        new ContextMenuItem() { Text = "Edit Document", Value = DocumentContextMenuAction.Edit },
        new ContextMenuItem() { Text = "Share Document", Value = DocumentContextMenuAction.Share },
        new ContextMenuItem() { Text = "Delete Document", Value = DocumentContextMenuAction.Delete },
    };


    void ShowContextMenuWithItems(MouseEventArgs args)
    {
        ContextMenuService.Open(args, _contextMenuItems, OnMenuItemClick);
    }

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        ContextMenuService.Close();
        switch (args.Value)
        {
            case DocumentContextMenuAction.View:
                OnViewClick();
                break;
            case DocumentContextMenuAction.Edit:
                OnEditClick();
                break;
            case DocumentContextMenuAction.Share:
                OnShareClick();
                break;
            case DocumentContextMenuAction.Delete:
                OnDeleteClick();
                break;
        }
    }

    void OnViewClick()
    {
        DialogService.Open($"{Document!.Name}",
            _ => @<ViewDocument DocumentDto="Document" />,
            new DialogOptions(){ CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true, CssClass = "big-dialog"}
            );
    }

    void OnEditClick()
    {
        DialogService.Open($"{Document!.Name}",
            _ => @<EditDocument DocumentDto="Document" />,
            new DialogOptions(){ CssClass = "big-dialog" }
            );
    }

    void OnShareClick()
    {
        DialogService.Open($"Share \"{Document!.Name}\"",
            _ => @<ShareDocument DocumentDto="Document" />,
            new DialogOptions(){ CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true}
            );
    }

    void OnDeleteClick()
    {
        DialogService.Open($"Delete \"{Document!.Name}\"?",
            _ => @<DeleteDocument DocumentDto="Document" OnDelete="@DocumentDeleted" />,
            new DialogOptions(){ CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true, CssClass = "small-dialog"}
            );
    }

    async Task DocumentDeleted()
    {
        await Deleted.InvokeAsync();
    }
    
}