@page "/documents/shared"

@using DocumentsApp.Shared.Dtos.DocumentDtos
@using Sieve.Models
@using DocumentsApp.Data.Exceptions

@inject IJSRuntime JsRuntime
@inject IShareDocumentService ShareDocumentService
@inject NotificationService NotificationService

@attribute [Authorize]

<PageTitle>DocumentsApp - Shared Documents</PageTitle>

<div class="row p-3 pb-5 mb-5">

        <div class="p-2 col-12 col-lg-6 col-xl-4">
            <RadzenCard class="w-100 square">
                <div>
                    <RadzenText class="mb-3"
                        TextStyle="TextStyle.H5"
                        Text="No shared documents." />
                    <hr>
                    <RadzenText class="mt-3"
                        TextStyle="TextStyle.Body2"
                        Text="There are no documents shared for you right now." />
                </div>
            </RadzenCard>
        </div>
    
        @foreach (var doc in _documentDtos)
        {
            <div class="p-2 col-6 col-lg-3 col-xl-2">
                <DocumentCard Document="@doc" />
            </div>
        }

        <div class="fixed-bottom border-top bg-white pagin-footer">
            <RadzenPager
                HorizontalAlign="HorizontalAlign.Right"
                Count="@ItemCount"
                PageSize="@PageSize"
                PageNumbersCount="@((int)Math.Ceiling((decimal)ItemCount/PageSize))"
                PageChanged="@FetchItems" />

        </div>


</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private List<GetDocumentDto> _documentDtos = new List<GetDocumentDto>();
    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 11;
    private int ItemCount { get; set; } = 1;

    private bool NoItems { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetDocs(1);
        }
        catch (NotFoundException)
        {
            NoItems = true;
        }
    }

    private async Task FetchItems(PagerEventArgs args)
    {
        await GetDocs(args.PageIndex + 1);
    }

    private async Task GetDocs(int pageIndex)
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
        var sieveModel = new SieveModel()
        {
            Page = pageIndex,
            PageSize = PageSize,
        };

        var pagedResults = await ShareDocumentService.GetAllSharedDocumentsAsync(sieveModel);
        Page = pageIndex;
        ItemCount = pagedResults.TotalItemsCount;
        _documentDtos = pagedResults.Items;
    }

}