@page "/documents"

@using DocumentsApp.Shared.Dtos.DocumentDtos
@using DocumentsApp.Shared.Notifications
@using Sieve.Models
@using DocumentsApp.Data.Exceptions

@inject IDocumentService DocumentService
@inject NotificationService NotificationService

@attribute [Authorize]

<PageTitle>DocumentsApp - My Documents</PageTitle>

<div class="row p-3 pb-5 mb-5">

    <div class="p-2 col-6 col-lg-3 col-xl-2">
        <AddNewDocumentCard OnDocumentCreated="OnDocumentCreated"/>
    </div>

        @foreach (var doc in _documentDtos)
        {
            <div class="p-2 col-6 col-lg-3 col-xl-2">
                <DocumentCard Document="@doc" Deleted="@OnDocumentDeleted" />
            </div>
        }

        <div class="fixed-bottom border-top bg-white pagin-footer">
            <RadzenPager
                HorizontalAlign="HorizontalAlign.Right"
                AlwaysVisible="@true"
                Count="@ItemCount"
                PageSize="@PageSize"
                PageNumbersCount="@((int)Math.Ceiling((decimal)ItemCount/PageSize))"
                PageChanged="@FetchItems" />

        </div>


</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private List<GetDocumentDto> _documentDtos = new();
    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 11;
    private int ItemCount { get; set; }

    private async Task FetchItems(PagerEventArgs args)
    {
        await GetDocs(args.PageIndex + 1);
    }

    private async Task GetDocs(int pageIndex)
    {
        var sieveModel = new SieveModel()
        {
            Page = pageIndex,
            PageSize = PageSize,
        };

        
        var pagedResults = await DocumentService.GetAllDocumentsAsync(sieveModel);
        Page = pageIndex;
        ItemCount = pagedResults.TotalItemsCount;
        _documentDtos = pagedResults.Items;
        StateHasChanged();
    }

    private void OnDocumentCreated(GetDocumentDto dto)
    {
        if (ItemCount == 0)
        {
            _documentDtos = new List<GetDocumentDto>() { dto };
            StateHasChanged();
        }
        else if (Page == 1)
        {
            _documentDtos.Insert(0, dto);
            StateHasChanged();
        }
        if (_documentDtos.Count > PageSize)
        {
            _documentDtos.RemoveAt(_documentDtos.Count - 1);
            ItemCount += 1;
            StateHasChanged();
        }
    }

    private async Task OnDocumentDeleted()
    {
        try
        {
            await GetDocs(Page);
        }
        catch (NotFoundException)
        {
            _documentDtos = new List<GetDocumentDto>();
            ItemCount = 0;
            Page = 1;
            PageSize = 11;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetDocs(1);
        }
        catch (NotFoundException)
        {
            NotificationService.Notify(
                new InfoNotification("You have no documents yet.","Click \"add a new document\" to create your first document!")
                );
        }
    }
    
    

}