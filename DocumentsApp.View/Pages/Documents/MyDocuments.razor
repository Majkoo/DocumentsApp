@page "/documents"

@using DocumentsApp.Shared.Dtos.DocumentDtos
@using Sieve.Models

@inject IJSRuntime JsRuntime
@inject IDocumentService DocumentService

@attribute [Authorize]

<PageTitle>DocumentsApp - My Documents</PageTitle>

<div class="row p-3 pb-5 mb-5">

    <div class="p-2 col-6 col-lg-3 col-xl-2">
        <AddNewDocumentCard />
    </div>

        @foreach (var doc in _documentDtos)
        {
            <div class="p-2 col-6 col-lg-3 col-xl-2">
                <DocumentCard Document="@doc" />
            </div>
        }

        <div class="fixed-bottom border-top bg-white pagin-footer">
            <RadzenPager
                HorizontalAlign="HorizontalAlign.Right"
                Count="@ItemCount"
                PageSize="@PageSize"
                PageNumbersCount="@Page"
                PageChanged="@FetchItems" />

        </div>


</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private List<GetDocumentDto> _documentDtos = new List<GetDocumentDto>();
    private int Page { get; set; } = 1;
    private int PageSize { get; set; } = 11;
    private int ItemCount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetDocs(1);
    }

    private async Task FetchItems(PagerEventArgs args)
    {
        await GetDocs(args.PageIndex + 1);
    }

    private async Task GetDocs(int pageIndex)
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
        var sieveModel = new SieveModel()
        {
            Page = pageIndex,
            PageSize = PageSize,
        };

        var pagedResults = await DocumentService.GetAllDocumentsAsync(sieveModel);
        Page = pageIndex;
        ItemCount = pagedResults.TotalItemsCount;
        _documentDtos = pagedResults.Items;
    }

}