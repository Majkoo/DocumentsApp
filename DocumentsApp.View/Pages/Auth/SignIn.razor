@page "/auth/signin"
@using DocumentsApp.Shared.Dtos.AccountDtos
@using Microsoft.AspNetCore.Identity
@using DocumentsApp.Data.Entities
@using DocumentsApp.Data.Auth
@using DocumentsApp.Data.Repos.Interfaces

@inject IAccountRepo AccountRepo
@inject IJSRuntime JsRuntime
@inject SignInManager<Account> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>DocumentsApp - Sign In</PageTitle>

<div class="w-100 text-left d-flex justify-content-center align-items-center my-4">

    <RadzenTemplateForm
        TItem="LoginAccountDto"
        Data="@_loginAccountDto"
        Style="width: 100%; max-width: 450px"
        Submit="() => OnSubmit(_loginAccountDto)">

        <RadzenFieldset>

            <h2 class="text-center mt-2 mb-4">
                <strong>Sign In</strong>
            </h2>

            <div class="mb-4">

                <RadzenLabel Text="Email or username"/>

                <RadzenTextBox
                    Placeholder="Enter email or username..."
                    Name="Email/Username"
                    Style="display: block"
                    @bind-Value="@_loginAccountDto.Email"/>

                <RadzenRequiredValidator
                    Component="Email/Username"
                    Text="Email/Username is required"
                    Popup="@true"
                    Style="position: absolute"/>

            </div>

            <div class="mb-4">

                <RadzenLabel Text="Password"/>

                <RadzenPassword
                    Placeholder="Enter password..."
                    Name="Password"
                    Style="display: block"
                    @bind-Value="@_loginAccountDto.Password"/>

                <RadzenRequiredValidator
                    Component="Password"
                    Text="Password is required"
                    Popup="@true" Style="position: absolute"/>

            </div>

            <div class="w-100 text-end">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </div>

        </RadzenFieldset>

        <div class="w-100 text-start">
            <RadzenText TextStyle="TextStyle.Caption" Text="Do not have an account?"/>
            <a href="auth/signup">
                <RadzenText TextStyle="TextStyle.Caption" Text="Create one here."/>
            </a>
        </div>

    </RadzenTemplateForm>

</div>

@code {

    private readonly LoginAccountDto _loginAccountDto = new LoginAccountDto();

    private async Task OnSubmit(LoginAccountDto loginDto)
    {
        // implement better error handling
        var userAccount = await AccountRepo.GetAccountByEmailAsync(loginDto.Email) ??
                          await AccountRepo.GetAccountByUsernameAsync(loginDto.Email);

        if (userAccount is null) await JsRuntime.InvokeVoidAsync("alert", "invalid login credentials");

        var signInResult = await SignInManager.CheckPasswordSignInAsync(userAccount, loginDto.Password, false);

        if (!signInResult.Succeeded) await JsRuntime.InvokeVoidAsync("alert", "invalid login credentials");
        if (signInResult.IsLockedOut || signInResult.IsNotAllowed) await JsRuntime.InvokeVoidAsync("alert", "Account locked out. check your e-mail.");

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

        if (userAccount is not null && signInResult.Succeeded && !signInResult.IsLockedOut && !signInResult.IsNotAllowed)
        {
            await customAuthStateProvider.MarkUserAsSignedIn(userAccount);
            NavigationManager.NavigateTo("/", true);
        }

    }
}

