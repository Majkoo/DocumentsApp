@page "/auth/submitpasswordreset"
@using Microsoft.AspNetCore.Identity
@using DocumentsApp.Data.Entities
@using DocumentsApp.Shared.Dtos.AccountDtos
@using DocumentsApp.Shared.Notifications

@inject UserManager<Account> UserManager
@inject IMailService MailService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<div class="w-100 text-left d-flex justify-content-center align-items-center my-4">

    <RadzenTemplateForm
        TItem="SubmitPasswordResetDto"
        Data="@_passwordResetDto"
        Style="width: 100%; max-width: 450px"
        Submit="() => OnSubmit(_passwordResetDto)">

        <RadzenFieldset>

            <h2 class="text-center mt-2 mb-4">
                <strong>Email for password reset</strong>
            </h2>

            <div class="mb-4">

                <RadzenTextBox
                    Placeholder="Enter email..."
                    Name="Email"
                    Style="display: block"
                    @bind-Value="@_passwordResetDto.Email"/>

                <RadzenRequiredValidator
                    Component="Email"
                    Text="Email is required"
                    Popup="@true"
                    Style="position: absolute"/>

                <RadzenEmailValidator
                    Component="Email"
                    Text="Provide a valid email address"
                    Popup="@true"
                    Style="position: absolute"/>
            </div>

            <div class="w-100 text-end">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Submit"></RadzenButton>
            </div>

        </RadzenFieldset>

    </RadzenTemplateForm>

</div>


@code {
    private readonly SubmitPasswordResetDto _passwordResetDto = new SubmitPasswordResetDto();

    private async Task OnSubmit(SubmitPasswordResetDto dto)
    {
        var user = await UserManager.FindByEmailAsync(dto.Email);
        
        if(user is null)
            NotificationService.Notify(new ErrorNotification("Email", "No user with such email"));
        else
        {
            var token = Uri.EscapeDataString(await UserManager.GeneratePasswordResetTokenAsync(user));
            var html = NavigationManager.ToAbsoluteUri($"/auth/resetpassword?token={token}&email={dto.Email}").ToString();
        
            MailService.SendMessageAsync(dto.Email, "Password Reset", html);
        
            NotificationService.Notify(new InfoNotification("Email", "Email for password reset send"));    
        }
    }
}