@page "/auth/signup"
@using DocumentsApp.Shared.Dtos.AccountDtos
@using DocumentsApp.Data.Entities
@using Microsoft.AspNetCore.Identity

@inject UserManager<Account> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>DocumentsApp - Sign Up</PageTitle>

<div class="w-100 text-left d-flex justify-content-center align-items-center my-4">

    <RadzenTemplateForm
        TItem="RegisterAccountDto"
        Data="@_registerAccountDto"
        Style="width: 100%; max-width: 450px"
        Submit="() => OnSubmit(_registerAccountDto)">

        <RadzenFieldset>

            <h2 class="text-center mt-2 mb-4">
                <strong>Sign Up</strong>
            </h2>

            <div class="mb-4">

                <RadzenLabel Text="Username"/>

                <RadzenTextBox
                    Placeholder="Enter Username..."
                    Name="Username"
                    Style="display: block"
                    @bind-Value="@_registerAccountDto.UserName"/>

                <RadzenRequiredValidator
                    Component="Username"
                    Text="Username is required"
                    Popup="@true"
                    Style="position: absolute"/>

            </div>

            <div class="mb-4">

                <RadzenLabel Text="Email"/>

                <RadzenTextBox
                    Placeholder="Enter email..."
                    Name="Email"
                    Style="display: block"
                    @bind-Value="@_registerAccountDto.Email"/>

                <RadzenRequiredValidator
                    Component="Email"
                    Text="Email is required"
                    Popup="@true"
                    Style="position: absolute"/>

                <RadzenEmailValidator
                    Component="Email"
                    Text="Provide a valid email address"
                    Popup="@true"
                    Style="position: absolute"/>

            </div>

            <div class="mb-4">

                <RadzenLabel Text="Password"/>

                <RadzenPassword
                    Placeholder="Enter password..."
                    Name="Password"
                    Style="display: block"
                    @bind-Value="@_registerAccountDto.Password"/>

                <RadzenRequiredValidator
                    Component="Password"
                    Text="Password is required"
                    Popup="@true"
                    Style="position: absolute"/>


            </div>

            <div class="mb-4">

                <RadzenLabel Text="Confirm Password"/>

                <RadzenPassword
                    Placeholder="Confirm password..."
                    Name="ConfirmPassword"
                    Style="display: block"
                    @bind-Value="@_registerAccountDto.ConfirmPassword"/>

                <RadzenRequiredValidator
                    Component="ConfirmPassword"
                    Text="Repeat your password"
                    Popup="@true"
                    Style="position: absolute" />

                <RadzenCompareValidator
                    Visible="@(!string.IsNullOrEmpty(_registerAccountDto.ConfirmPassword))"
                    Value="@_registerAccountDto.Password"
                    Component="ConfirmPassword"
                    Text="Passwords should be the same"
                    Popup="@true"
                    Style="position: absolute" />


            </div>

            <div class="w-100 text-end">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </div>

        </RadzenFieldset>

        <div class="w-100 text-start">
            <RadzenText TextStyle="TextStyle.Caption" Text="Have an account?"/>
            <a href="auth/signin">
                <RadzenText TextStyle="TextStyle.Caption" Text="Sign in here."/>
            </a>
        </div>

    </RadzenTemplateForm>

</div>

@code {

    readonly RegisterAccountDto _registerAccountDto = new RegisterAccountDto();

    private async Task OnSubmit(RegisterAccountDto registerDto)
    {
        // implement better error handling

        var newAccount = new Account()
        {
            UserName = _registerAccountDto.UserName,
            Email = _registerAccountDto.Email
        };

        var result = await UserManager.CreateAsync(newAccount, _registerAccountDto.Password);

        if (result.Succeeded)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Register succeed");
            NavigationManager.NavigateTo("/auth/signin");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Register failed");
            foreach (var identityError in result.Errors)
            {
                await JsRuntime.InvokeVoidAsync("alert", identityError.Description);
            }
        }


    }

}